/*
--------------------------------------------
       üìå Provider Overrides (Scoped values)
--------------------------------------------

üîπ Purpose:
   - Sometimes you want to use different values for the same provider 
     in different parts of your app.
   - Example: Inject a mock API in tests, or show different configs
     for child widgets without affecting the global app.

   ‚úÖ In Riverpod 2.x, `ScopedProvider` is replaced by **overrides**.

üîπ Steps Overview:
   1Ô∏è‚É£ Define a Provider ‚Üí Exposes a value (e.g., a String message).  
   2Ô∏è‚É£ Wrap root app with ProviderScope.  
   3Ô∏è‚É£ Wrap a child widget with another ProviderScope ‚Üí Override the provider.  
   4Ô∏è‚É£ Inside child widgets, `ref.watch()` will give the overridden value.  
   5Ô∏è‚É£ Nested overrides take precedence over outer/global providers.

--------------------------------------------
*/

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

final greetingProvider = Provider<String>((ref) => "Hello from Global Provider üåç");

void main() {
  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {

    final greeting = ref.watch(greetingProvider);

    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Provider Overrides Example',
      home: Scaffold(
        appBar: AppBar(title: const Text('Riverpod Overrides')),
        body: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Center(
              child: Text(greeting, style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
            ),
            const SizedBox(height: 20),

            // Step 3Ô∏è‚É£: Nested overrides take precedence
            ProviderScope(
              overrides: [
                greetingProvider.overrideWithValue("Hello from Scoped Override üéØ"),
              ],
              child: const OverriddenWidget()
            ),
          ],
        ),
      ),
    );
  }
}

// Widget that uses overridden provider
class OverriddenWidget extends ConsumerWidget {
  const OverriddenWidget({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {

    final scopedGreeting = ref.watch(greetingProvider);
    return Text(scopedGreeting, style: const TextStyle(fontSize: 22, color: Colors.blue));
  }
}

/*
--------------------------------------------
          üìå Dry Run (Execution Flow)
--------------------------------------------
1Ô∏è‚É£ greetingProvider ‚Üí Globally provides "Hello from Global Provider üåç".
2Ô∏è‚É£ MyApp ‚Üí Reads global value and displays it.
3Ô∏è‚É£ ProviderScope (override) ‚Üí Replaces greetingProvider with 
   "Hello from Scoped Override üéØ" for its subtree.
4Ô∏è‚É£ OverriddenWidget ‚Üí Reads overridden value instead of global.
5Ô∏è‚É£ Nested overrides (if any) take precedence over outer/global providers.

‚úÖ Key Takeaways:
- ScopedProvider was removed; use overrides instead.
- `ProviderScope(overrides: [...])` lets you inject custom values locally.
- Great for testing, theming, mock APIs, and feature toggles.
- `ref.watch()` will always return the **nearest scoped value**.
- UI distinction helps visually understand scoped overrides.
*/
